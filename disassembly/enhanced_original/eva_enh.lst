                      ;****************************************************
                      ;* KK Systems EVA-1 Firmware                        *
                      ;* Disassembled and commented 2025 by R. Offner     *
                      ;* v1.0                                             *
                      ;* This is the enhanced (mostly original) Version.  *
                      ;* This Version works fine with only 16kBit of      *
                      ;* TextRAM (A11 and A12 must be tied low).          *
                      ;* Changes are:                                     *
                      ;* .) Startup screen,                               *
                      ;* .) extended Test Picture,                        *
                      ;* .) ROM Start @ $F000,                            *
                      ;* .) initialisation of the HD6845,                 *
                      ;****************************************************
                      ;
                      ; Very quick remainder how the communication between a 
HX-20 and the EVA-1 works.
                      ;
                      ; 1. MASTER - SLAVE HANDSHAKE
                      ;
                      ; SOURCE         DESTINATION            COMMENT
                      ;
                      ;                                  ENQURE TO DESTINATION 
DEVICE
                      ;(EOT)    --->                     $04
                      ; P1      --->                     is usually $31
                      ; DID     --->                     can be $30 or $20
                      ; SID     --->                     can be $20 or $30
                      ; ENQ     --->                     $05
                      ;        <---    ACK               $06
                      ;
                      ; 2. HEADER                                              
                              Memory Location
                      ;                                                        
                                RX    TX
                      ; SOH     --->                     $01 - SEND HEADER 
(FUNCTION)                           -    $80
                      ; FMT     --->                     usually $00 for HX-20 
-> EVA-1 and $01 for other dir. $80   $81
                      ; DID     --->                     can be $30 or $20     
                                $81   $82
                      ; SID     --->                     can be $20 or $30     
                                $82   $83
                      ; FNC     --->                     $xx                   
                                $83   $84
                      ; SIZ     --->                     $xx                   
                                $84   $85
                      ; HCS     --->                     Checksum              
                                $85   
                      ;        <---    ACK (NAK), (WAK)  $06
                      ;
                      ; 3. DATA
                      ;
                      ; STX     --->                     $02                   
                               
                      ; DB0     --->                     Data Bytes            
                                $A0
                      ; DB1     --->                     Data Bytes            
                                $A1
                      ;  .      --->                     Data Bytes            
                                $A2
                      ;  .      --->                     Data Bytes            
                                $A3
                      ; DBN     --->                     Data Bytes            
                                $A4
                      ; ETX     --->                     $03
                      ; CKS     --->                     Checksum
                      ;        <---    ACK, (NAK)        $06
                      ;
                      ; 4. END OF TRAMSMISSION
                      ;
                      ;(EOT)    --->                     $04
                      ;
                      ;---------------------------------------------------------
----------
                      ; CONTROL CODES
                      ; SOH = 01
                      ; STX = 02
                      ; ETX = 03
                      ; EOT = 04
                      ; ENQ = 05
                      ; ACK = 06
                      ; DLE = 10
                      ; NAK = 15
                      ; WAK = DLE ;  (1F 3B)
                      ;---------------------------------------------------------
----------
                      ; FMT CODE  FMT  DID  SID  FNC  SIZ  MSG       COMMENT
                      ;   00       1    1    1    1    1   1-256   PREFERRED 
FORMAT
                      ;   01       1    1    1    1    1   1-256   RETURNED 
RESULT
                      ;   02       1    1    1    1    2   1-65536          
(NOT SUPPORTED)
                      ;   03       1    1    1    1    2   1-65536          
(NOT SUPPORTED)
                      ;   04       2    2    2    1    1   1-256            
(NOT SUPPORTED)
                      ;   05       2    2    2    1    1   1-256            
(NOT SUPPORTED)
                      ;   06       2    2    2    1    2   1-65536          
(NOT SUPPORTED)
                      ;   07       2    2    2    1    2   1-65536          
(NOT SUPPORTED)
                      ;---------------------------------------------------------
----------
                      ; Some useful IDs:
                      ; HX-20: $20
                      ; PX-8:  $22
                      ; PX-4:  $23
                      ; EVA-1 (and prob. other Screen Adpters) $30
                      ; First TF-20 (first & second disk):  $31
                      ; Second TF-20 (third & fourth disk): $32
                      ;****************************************************
                      ;* Used Labels                                      *
                      ;****************************************************

 0000                 P1DDR          EQU     $0000
 0001                 P2DDR          EQU     $0001
 0002                 P1DR           EQU     $0002
 0003                 P2DR           EQU     $0003
 0009                 CNTH           EQU     $0009
 0010                 RMCR           EQU     $0010
 0011                 TRCSR          EQU     $0011
 0012                 RDR            EQU     $0012
 0013                 TDR            EQU     $0013
 0014                 RCR            EQU     $0014
 0080                 HDRBUFSTRT     EQU     $0080 ; -|- Header Buffer
 0082                 HDRSRC         EQU     $0082 ;  |
 0083                 HDRFUNC        EQU     $0083 ;  |
 0084                 HDRSZFN        EQU     $0084 ;  | - SIZ for RX and FNC 
for TX
 0085                 HDRCSSZ        EQU     $0085 ; -| - HCS for RX and SIZ 
for TX
 0098                 _6845STRTADRH  EQU     $0098 ; 
 0099                 _6845STRTADRL  EQU     $0099 ; 6845 Start Address
 009A                 CursorColumn   EQU     $009A ; Colunm of cursor 
(0..Char_per_Line-1)
 009B                 CursorRow      EQU     $009B ; Row of Cursor (0..24)
 009C                 _6845CRSRH     EQU     $009C ; 
 009D                 _6845CRSRL     EQU     $009D ; _6845CRSR always 0x1000 
less than RAMTXTSTART
 00A0                 TXTBUFA0A1     EQU     $00A0 ; -|- Text Buffer
 00A1                 TXTBUFA1       EQU     $00A1 ;  |
 00A2                 TXTBUFA2A3     EQU     $00A2 ;  |
 00A3                 TXTBUFA3       EQU     $00A3 ;  |
 00A4                 TXTBUFA4A5     EQU     $00A4 ;  |
 00A6                 TXTBUFA6A7     EQU     $00A6 ;  |
 00A8                 TXTBUFA8A9     EQU     $00A8 ; -|
 00AC                 TEMPACAD       EQU     $00AC ; Temp Var. only used in 
CONVXPXLCHAR
 00AE                 TEMPAEAF       EQU     $00AE ; Temp Var. only used in 
CONVXPXLCHAR
 00AF                 TEMPAF         EQU     $00AF ; Temp Var. only used in 
CONVXPXLCHAR
 00B0                 TEMPB0B1       EQU     $00B0 ; Temp Var. used in DRWLN 
and READCHAR
 00B2                 TEMPB2B3       EQU     $00B2 ; Temp Var. used in DRWLN
 00B4                 TEMPB4B5       EQU     $00B4 ; Temp Var. used in DRWLN
 00B6                 TEMPB6B7       EQU     $00B6 ; Temp Var. used in DRWLN
 00B8                 TEMPB8B9       EQU     $00B8 ; Temp Var. used in DRWLN 
(only stored, never read)
 00BA                 TEMPBABB       EQU     $00BA ; Temp Var. used in DRWLN 
(only stored, never read)
 00BC                 TEMPBCBD       EQU     $00BC ; Temp Var. used in DRWLN
 00BE                 TEMPBEBF       EQU     $00BE ; Temp Var. used in DRWLN
 00BF                 TEMPBF         EQU     $00BF ; Temp Var. used in DRWLN
 00C1                 RXTXCNT        EQU     $00C1 ; How many Char. to send
 00C2                 TEMPC2C3       EQU     $00C2 ; Temp Var. used in DRWLN
 00C4                 SETB7          EQU     $00C4 ; If $FF Bit7 of Next 
character is set
 00C5                 CHRTMP         EQU     $00C5 ; Temp Character Storage 
for Intensity and Inverse Bit
 00C6                 _6845CRSRREG   EQU     $00C6 ; Temp Var. for 6845 Cursor 
Register
 00C7                 CHKSUM         EQU     $00C7 ; Temp Var. for Checksum 
Calculation
 00C8                 TMPCRSRRW      EQU     $00C8 ; Temp Var. for Cursor Row 
used in READLINE
 00CA                 TEMP16_01      EQU     $00CA ; Temp Var. for 'X' 
Register
 00CC                 RAMTXTSTART    EQU     $00CC ; RAM Address where the 
Text starts (starts @ $1000)
 00CE                 M00CE          EQU     $00CE
 00D0                 M00D0          EQU     $00D0
 00D1                 M00D1          EQU     $00D1
 00D2                 Char_per_Line  EQU     $00D2 ; can be 32, 40, 72 or 80
 00D3                 GRAPHMOD       EQU     $00D3 ; if 0 only Textmode, else 
Graphic also
 00D4                 TMPRDCH        EQU     $00D4 ; Temp Var. for READCHAR
 00D8                 TEMPD8D9       EQU     $00D8
 00D9                 M00D9          EQU     $00D9
 00DA                 M00DA          EQU     $00DA
 00FF                 RAMEND         EQU     $00FF
 1000                 TEXTRAM        EQU     $1000 ;
 1800                 TRAMEND        EQU     $1800 ; End of Text Ram +1
 4000                 M6845_0        EQU     $4000
 4001                 M6845_1        EQU     $4001
 8000                 GRAPHICRAM     EQU     $8000 ; Start of Graphic RAM
 C000                 GRAMEND        EQU     $C000 ; End of Graphic RAM+1 
(used for Clear)

                      ;****************************************************
                      ;* Program Code / Data Areas                        *
                      ;****************************************************

                              ORG     $F000

 F000 0F              hdlr_RST       SEI                     ;
 F001 8E00FF                         LDS     #RAMEND         ;
 F004 5F                             CLRB                    ;
 F005 86FF                           LDAA    #$FF            ;
 F007 97C7                           STAA    CHKSUM          ;
 F009 9700                           STAA    P1DDR           ;
 F00B D701                           STAB    P2DDR           ;
 F00D 860F                           LDAA    #$0F            ;
 F00F 9702                           STAA    P1DR            ; Clear INVERT, 
TXTON_OFF, GTEXT, TEXT (P1.0-P1.3), Set CHARSET, T/G, HIGHRES (P1.4-P1.7)
 F011 D7D3                           STAB    GRAPHMOD        ;
 F013 D703                           STAB    P2DR            ;
 F015 D7C6                           STAB    _6845CRSRREG    ;
 F017 860C                           LDAA    #$0C            ;
 F019 9710                           STAA    RMCR            ; CC0 and CC1 set 
- external Serial clock (8xBaudrate)
 F01B C60A                           LDAB    #$0A            ;
 F01D D711                           STAB    TRCSR           ; Receiver and 
Transmitter Enable
 F01F 86C0                           LDAA    #$C0            ;
 F021 9714                           STAA    RCR             ; enable internal 
RAM
 F023 BDF66E                         JSR     CONF40          ;
 F026 BDF4A2                         JSR     ClearGRAM       ;
 F029 8EFCFF                         LDS     #GREETING-1     ; Write Text to 
TextRAM
 F02C CE1000                         LDX     #TEXTRAM        ; Start Position 
of Text
 F02F 32              LOOP01         PULA                    ;
 F030 A700                           STAA    ,X              ;
 F032 08                             INX                     ;
 F033 8100                           CMPA    #$00            ;
 F035 26F8                           BNE     LOOP01          ;
 F037 8E00FF                         LDS     #RAMEND         ;
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
                      ;**                      RX State Machine                
                     **
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
 F03A DE11            LOOP02         LDX     TRCSR           ;
 F03C 9611            WAITHNDSHK     LDAA    TRCSR           ; State Machine 
for Handshake (1)
 F03E 8540                           BITA    #$40            ; check for 
Overrun Framing Error
 F040 26F8                           BNE     LOOP02          ;
 F042 D612                           LDAB    RDR             ; Received Char 
is in 'B'
 F044 C131                           CMPB    #$31            ;
 F046 26F4                           BNE     WAITHNDSHK      ; Check 'START? 
(31)' - everything before gets thrown away, START of STATE MACHINE!
 F048 8D1A                           BSR     WAITRXC         ;
 F04A C130                           CMPB    #$30            ;
 F04C 26EE                           BNE     WAITHNDSHK      ; Check 'DID 
(30)'
 F04E 8D14                           BSR     WAITRXC         ;
 F050 C120                           CMPB    #$20            ;
 F052 26E8                           BNE     WAITHNDSHK      ; Check 'SID 
(20)'
 F054 8D0E                           BSR     WAITRXC         ;
 F056 C105                           CMPB    #$05            ;
 F058 26E2                           BNE     WAITHNDSHK      ; Check for 'ENQ 
(05)'
 F05A 8D53                           BSR     Send_ACK        ;
 F05C 8D06                           BSR     WAITRXC         ;
 F05E C101                           CMPB    #$01            ;
 F060 2734                           BEQ     GETHDR          ; Check 'SOH 
(01)'
 F062 2046                           BRA     SNDNONACK       ;
                      ;------------------------------------  ;
 F064 7D0011          WAITRXC        TST     >TRCSR          ; Blocking Wait 
for RX Character
 F067 2AFB                           BPL     WAITRXC         ;
 F069 D612                           LDAB    RDR             ;
 F06B 39                             RTS                     ;
                      ;--------------------------------------;
 F06C 8DF6            GETTEXT        BSR     WAITRXC         ; State Machine 
for Text (4)
 F06E C102                           CMPB    #$02            ; Check 'STX 
(02)'
 F070 2638                           BNE     SNDNONACK       ;
 F072 CE00A0                         LDX     #TXTBUFA0A1     ; Buffer starts @ 
$A0
 F075 17                             TBA                     ; RXChar is now 
also in 'A' for Checksum
 F076 D684                           LDAB    HDRSZFN         ;
 F078 5C                             INCB                    ;
 F079 D7C1                           STAB    RXTXCNT         ;
 F07B 8DE7            LOOP03         BSR     WAITRXC         ;
 F07D E700                           STAB    ,X              ;
 F07F 1B                             ABA                     ;
 F080 08                             INX                     ;
 F081 7A00C1                         DEC     >RXTXCNT        ;
 F084 26F5                           BNE     LOOP03          ;
 F086 8DDC                           BSR     WAITRXC         ;
 F088 C103                           CMPB    #$03            ;  Check 'ETX 
(03)'
 F08A 2606                           BNE     Send_NACK       ;
 F08C 1B                             ABA                     ;
 F08D 8DD5                           BSR     WAITRXC         ;
 F08F 1B                             ABA                     ;
 F090 271D                           BEQ     Send_ACK        ; Check for 
Checksum = zero
 F092 C615            Send_NACK      LDAB    #$15            ;
 F094 201B                           BRA     SendB           ; Send NACK
                      ;--------------------------------------;
 F096 17              GETHDR         TBA                     ; State Machine 
for Header (2), RXChar is now also in 'A' for Checksum (01)
 F097 CE0080                         LDX     #HDRBUFSTRT     ; Buffer starts 
at $80
 F09A 8DC8            LOOP04         BSR     WAITRXC         ;
 F09C E700                           STAB    ,X              ; Store in 
Buffer: 01,00,30
 F09E 1B                             ABA                     ; add to Checksum 
(01+00+30)
 F09F 08                             INX                     ;
 F0A0 8C0085                         CPX     #HDRCSSZ        ; Check max 
Length of 6 Characters (HDRCSSZ is @ $85)
 F0A3 26F5                           BNE     LOOP04          ;
 F0A5 8DBD                           BSR     WAITRXC         ; Get Checksum 
from HX-20
 F0A7 1B                             ABA                     ;
 F0A8 2710                           BEQ     HDRFINISHED     ; Check for 
Checksum = zero.
 F0AA 8DE6            SNDNONACK      BSR     Send_NACK       ; There may be a 
small Bug! EVA-1 sends a NACK every Time after Header 01,00,30!
 F0AC 7EF03C                         JMP     WAITHNDSHK      ;
*** warning 1: Long branch within short branch range could be optimized
                      ;--------------------------------------;
 F0AF C606            Send_ACK       LDAB    #$06            ;
 F0B1 9611            SendB          LDAA    TRCSR           ;
 F0B3 8420                           ANDA    #$20            ;  Check TX Reg. 
Empty
 F0B5 27FA                           BEQ     SendB           ;
 F0B7 D713                           STAB    TDR             ;
 F0B9 39                             RTS                     ;
                      ;--------------------------------------;
 F0BA 8DF3            HDRFINISHED    BSR     Send_ACK        ; Header is done 
(3), Send ACK
 F0BC 8DAE                           BSR     GETTEXT         ; Receive TEXT 
Packet
 F0BE 7F0085                         CLR     >HDRCSSZ        ;
 F0C1 8DA1                           BSR     WAITRXC         ;
 F0C3 C104                           CMPB    #$04            ; Check 'EOT 
(04)'
 F0C5 26E3                           BNE     SNDNONACK       ;
 F0C7 9683                           LDAA    HDRFUNC         ;
 F0C9 CEF75D                         LDX     #EPSEND         ; Load End of 
EPSFUNC Jumptable
 F0CC DFCA                           STX     TEMP16_01       ;
 F0CE CEF724                         LDX     #EPSPFUNC       ; Load Beginning 
of EPSFUNC Jumptable
 F0D1 BDF240                         JSR     EXECSRCH        ; Search for 
correct Function, if found Jump to it
 F0D4 20D4                           BRA     SNDNONACK       ;
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
                      ;**                      TX Functions                    
                     **
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
                      ; SNDHDR:
                      ; Builds 6 Byte Header and sends it [01 01 20 30 FUNC 
SIZ]
                      ; needs HDRCSSZ @ $85 which becomes SIZ and HDRFUNC
                      ; Terminates with RTS
                      ;
 F0D6 8606            SNDHDR         LDAA    #$06            ; 6 Bytes long
 F0D8 97C1                           STAA    RXTXCNT         ;
 F0DA 9683                           LDAA    HDRFUNC         ; FUNC from $83
 F0DC 9784                           STAA    HDRSZFN         ; to $84
 F0DE FEF69F                         LDX     HDRDAT01        ; Reads $01,$01 
from EPROM
 F0E1 DF80                           STX     HDRBUFSTRT      ; Buffer starts @ 
$80
 F0E3 FEF6A1                         LDX     HDRDAT02        ; Reads $20,$30 
from EPROM
 F0E6 DF82                           STX     HDRSRC          ; @ $82
 F0E8 CE0080                         LDX     #HDRBUFSTRT     ;
                      ;--------------------------------------;
                      ; SNDARR1:
                      ; sends Values for RXTXCNT from 'X' Pointer and builds 
Checksum
                      ; blocking waits for one RX Character
                      ;
 F0EB 4F              SNDARR1        CLRA                    ;
 F0EC E600            SNDARR2        LDAB    ,X              ;
 F0EE D4C7                           ANDB    CHKSUM          ;
 F0F0 1B                             ABA                     ; Add to Checksum
 F0F1 36                             PSHA                    ;
 F0F2 8DBD                           BSR     SendB           ;
 F0F4 32                             PULA                    ;
 F0F5 08                             INX                     ;
 F0F6 7A00C1                         DEC     >RXTXCNT        ;
 F0F9 26F1                           BNE     SNDARR2         ; Loop until all 
char are sent
 F0FB 40                             NEGA                    ;
 F0FC 16                             TAB                     ;
 F0FD 8DB2                           BSR     SendB           ; Send Checksum
 F0FF BDF064                         JSR     WAITRXC         ;
 F102 86FF                           LDAA    #$FF            ;
 F104 97C7                           STAA    CHKSUM          ;
 F106 39                             RTS                     ;
                      ;--------------------------------------;
 F107 CEF655                         LDX     #SendPKT_00     ; Never executed
 F10A 8601                           LDAA    #$01            ; Never executed
                      ;--------------------------------------;
 F10C 8B03            SENDPAK        ADDA    #$03            ; 'A' is the 
Charactercount without Checksum, Start and Stop, 'X' is the Pointer to Data
 F10E 97C1                           STAA    RXTXCNT         ; (only used for 
one Packet - Send Screensize)
 F110 E600            LOOP06         LDAB    ,X              ;
 F112 BDF0B1                         JSR     SendB           ;
*** warning 1: Long branch within short branch range could be optimized
 F115 08                             INX                     ;
 F116 7A00C1                         DEC     >RXTXCNT        ;
 F119 26F5                           BNE     LOOP06          ;
 F11B BDF064                         JSR     WAITRXC         ;
                      ;--------------------------------------;
 F11E C604            Send_EOT       LDAB    #$04            ;
 F120 BDF0B1                         JSR     SendB           ;
*** warning 1: Long branch within short branch range could be optimized
 F123 2006                           BRA     DISABLED        ; JMP to 
WAITHNDSHK
                      ;--------------------------------------;
 F125 7F00D3                         CLR     >GRAPHMOD       ; Never executed
 F128 BDF4D3                         JSR     CONF80          ; Never executed
 F12B 7EF03C          DISABLED       JMP     WAITHNDSHK      ;
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
                      ;**                      various Functions               
                     **
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
                      ; RSTTXTSCRN:
                      ; Clears all the TextRAM ($1000-$1FFF) and all rel. 
variables
                      ; Terminates with RTS
                      ;
 F12E CE0000          RSTTXTSCRN     LDX     #$0000          ; Clear 
everything
 F131 DFD0                           STX     M00D0           ;
 F133 DFC4                           STX     SETB7           ;
 F135 DF98                           STX     _6845STRTADRH   ;
 F137 DF9A                           STX     CursorColumn    ;
 F139 DF9C                           STX     _6845CRSRH      ;
 F13B CE1000                         LDX     #TEXTRAM        ;
 F13E DFCC                           STX     RAMTXTSTART     ;
 F140 4F                             CLRA                    ;
 F141 A700            ClearTRAM      STAA    ,X              ;
 F143 08                             INX                     ;
 F144 8C1800                         CPX     #TRAMEND        ;  End of TRAM 
(Ch. from 0x1800 to 0x2000)
 F147 26F8                           BNE     ClearTRAM       ;
 F149 39                             RTS                     ;
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
                      ;**                       EPSP Functions                 
                     **
                      ;*********************************************************
**********************
                      ;*********************************************************
**********************
 F14A 96A2            READCHAR       LDAA    TXTBUFA2A3      ; EPSPFUNC: $97
 F14C 97CE                           STAA    M00CE           ;
 F14E 9785                           STAA    HDRCSSZ         ;
 F150 BDF0D6                         JSR     SNDHDR          ;
*** warning 1: Long branch within short branch range could be optimized
 F153 DEA0                           LDX     TXTBUFA0A1      ;
 F155 DF9A                           STX     CursorColumn    ;
 F157 BDF288                         JSR     SET6845ADD      ;
 F15A DECC                           LDX     RAMTXTSTART     ;
 F15C 08                             INX                     ;
 F15D D6CE                           LDAB    M00CE           ;
 F15F 3A                             ABX                     ;
 F160 A600                           LDAA    ,X              ;
 F162 97D4                           STAA    TMPRDCH         ;
 F164 DFB0                           STX     TEMPB0B1        ;
 F166 8603                           LDAA    #$03            ;
 F168 A700                           STAA    ,X              ;
 F16A CB02                           ADDB    #$02            ;
 F16C D7C1                           STAB    RXTXCNT         ;
 F16E DECC                           LDX     RAMTXTSTART     ;
 F170 C602                           LDAB    #$02            ;
 F172 BDF0B1                         JSR     SendB           ;
 F175 17                             TBA                     ; 'A' holds $02
 F176 C67F                           LDAB    #$7F            ;
 F178 D7C7                           STAB    CHKSUM          ;
 F17A BDF0EC                         JSR     SNDARR2         ; send it from 
'X'
 F17D DEB0                           LDX     TEMPB0B1        ;
 F17F 96D4                           LDAA    TMPRDCH         ;
 F181 A700                           STAA    ,X              ;
 F183 2099                           BRA     Send_EOT        ;
                      ;--------------------------------------;
 F185 8D08            SCRNSIZE       BSR     LDCHKSM         ; EPSPFUNC: $88 
and $89
 F187 CEF659                         LDX     #SCRNSZ8025     ; Reads 
$02,$50,$19,$03,$92 from EPROM
 F18A 8602                           LDAA    #$02            ; send two bytes 
excluding Start, Stop and checksum (=5)
 F18C 7EF10C                         JMP     SENDPAK         ;
                                                             ;
 F18F 8601            LDCHKSM        LDAA    #$01            ;
 F191 9785            SHDRCSSZ       STAA    HDRCSSZ         ;
 F193 7EF0D6                         JMP     SNDHDR          ;
                      ;--------------------------------------;
 F196 96D0            GCRSRPOS       LDAA    M00D0           ; EPSPFUNC: $8c
 F198 97D1                           STAA    M00D1           ;
 F19A 969A                           LDAA    CursorColumn    ;
 F19C 4C                             INCA                    ;
 F19D 97D0                           STAA    M00D0           ;
 F19F 8DEE            SENDTX2        BSR     LDCHKSM         ;
 F1A1 DE9A                           LDX     CursorColumn    ;
 F1A3 DFA1                           STX     TXTBUFA1        ; $A1,$A2 is 
00,00 at first
 F1A5 8603                           LDAA    #$03            ;
 F1A7 97A3                           STAA    TXTBUFA3        ; add ETX ($03)
 F1A9 8602                           LDAA    #$02            ; send 4 char + 
checksum
 F1AB 8B02            SENDTXT        ADDA    #$02            ;
 F1AD 97C1                           STAA    RXTXCNT         ;
 F1AF 8602                           LDAA    #$02            ;
 F1B1 97A0                           STAA    TXTBUFA0A1      ; add STX ($02) 
to $A0
 F1B3 CE00A0                         LDX     #TXTBUFA0A1     ;
 F1B6 BDF0EB                         JSR     SNDARR1         ; send it!
 F1B9 7EF11E                         JMP     Send_EOT        ; send EOT ($04)
                      ;--------------------------------------;
 F1BC 5F              GETPOINT       CLRB                    ; EPSPFUNC: $8f
 F1BD D785                           STAB    HDRCSSZ         ;
 F1BF DCA0                           LDD     TXTBUFA0A1      ; in A0A1 is the 
X Pos.
 F1C1 BDF301                         JSR     CONVXPXLCHAR    ;
 F1C4 D4CE                           ANDB    M00CE           ;
 F1C6 2702                           BEQ     ZC1CA           ;
 F1C8 C601                           LDAB    #$01            ;
 F1CA D7A1            ZC1CA          STAB    TXTBUFA1        ;
 F1CC BDF0D6                         JSR     SNDHDR          ;
 F1CF 8603                           LDAA    #$03            ;
 F1D1 97A2                           STAA    TXTBUFA2A3      ;
 F1D3 8601                           LDAA    #$01            ;
 F1D5 20D4                           BRA     SENDTXT         ;
                      ;--------------------------------------;
 F1D7 8603            READLINE       LDAA    #$03            ; EPSPFUNC: $91
 F1D9 8DB6                           BSR     SHDRCSSZ        ;
 F1DB 969B                           LDAA    CursorRow       ;
 F1DD 270C                           BEQ     ZC1EB           ;
 F1DF BDF515          ZC1DF          JSR     CRSRLFT         ;
 F1E2 DECC                           LDX     RAMTXTSTART     ;
 F1E4 A600                           LDAA    ,X              ;
 F1E6 26F7                           BNE     ZC1DF           ;
 F1E8 BDF26D                         JSR     INCCRSR         ;
 F1EB 969B            ZC1EB          LDAA    CursorRow       ;
 F1ED 97C8                           STAA    TMPCRSRRW       ;
 F1EF DECC            LOCAL0a        LDX     RAMTXTSTART     ;
 F1F1 A600                           LDAA    ,X              ;
 F1F3 2708                           BEQ     LOCAL09         ;
 F1F5 BDF26D                         JSR     INCCRSR         ;
 F1F8 BDF288                         JSR     SET6845ADD      ;
 F1FB 20F2                           BRA     LOCAL0a         ;
                                                             ;
 F1FD CE00A0          LOCAL09        LDX     #TXTBUFA0A1     ;
 F200 96C8                           LDAA    TMPCRSRRW       ;
 F202 A702                           STAA    $02,X           ;
 F204 D69B                           LDAB    CursorRow       ;
 F206 E704                           STAB    $04,X           ;
 F208 969A                           LDAA    CursorColumn    ;
 F20A A703                           STAA    $03,X           ;
 F20C 96D1                           LDAA    M00D1           ;
 F20E 2705                           BEQ     ZC215           ;
 F210 4A                             DECA                    ;
 F211 6C04                           INC     $04,X           ;
 F213 6F03                           CLR     $03,X           ;
 F215 A701            ZC215          STAA    $01,X           ;
 F217 A604                           LDAA    $04,X           ;
 F219 97C8                           STAA    TMPCRSRRW       ;
 F21B 4F                             CLRA                    ;
 F21C 97D0                           STAA    M00D0           ;
 F21E 8603                           LDAA    #$03            ;
 F220 A705                           STAA    $05,X           ;
 F222 8604                           LDAA    #$04            ;
 F224 2085                           BRA     SENDTXT         ;
                      ;--------------------------------------;
 F226 9602            TEXTON_OFF     LDAA    P1DR            ; Char: $F1
 F228 8802                           EORA    #$02            ; Toggle 
TXTON_OFF (P1.1)
 F22A 9702            LOCAL01        STAA    P1DR            ;
 F22C 203A                           BRA     SENDRESP        ;
                      ;--------------------------------------;
 F22E 9602            INVERTTEXT     LDAA    P1DR            ; Char: $F2
 F230 8801                           EORA    #$01            ; Toggle INVERT 
(P1.0)
 F232 20F6                           BRA     LOCAL01         ;
                      ;--------------------------------------;
 F234 CEF703          CTRLCHAR       LDX     #SwitchCharset  ; Load End of 
Control Char Jumptable
 F237 DFCA                           STX     TEMP16_01       ; holds End of 
Control Char Jumptable
 F239 CEF6A3                         LDX     #CTRLTAB        ; Load Start of 
Control Char Jumptable
 F23C 8D02                           BSR     EXECSRCH        ;
 F23E 2016                           BRA     REGULACHAR      ;
                      ;--------------------------------------;
 F240 A100            EXECSRCH       CMPA    ,X              ; Search for 
Function and Jump to it
 F242 2708                           BEQ     EXECFUNC        ;
 F244 08                             INX                     ;
 F245 08                             INX                     ;
 F246 08                             INX                     ;
 F247 9CCA                           CPX     TEMP16_01       ; holds End of 
EPSFUNC or Function Jumptable
 F249 26F5                           BNE     EXECSRCH        ;
 F24B 39                             RTS                     ; nothing found, 
must be a regular character
                      ;--------------------------------------;
 F24C 31              EXECFUNC       INS                     ; Execute 
Function
 F24D 31                             INS                     ;
 F24E EE01                           LDX     $01,X           ;
 F250 6E00                           JMP     ,X              ;
                      ;--------------------------------------;
 F252 96A0            WRITECHAR      LDAA    TXTBUFA0A1      ; EPSPFUNC: $92 
and $98, 'A' holds the Character
 F254 20DE                           BRA     CTRLCHAR        ; Check is it a 
Controlcharacter
                      ;--------------------------------------;
 F256 8120            REGULACHAR     CMPA    #$20            ; Write a regular 
character (above $1F)
 F258 2B0E                           BMI     SENDRESP        ;
 F25A DECC                           LDX     RAMTXTSTART     ;
 F25C 847F                           ANDA    #$7F            ; limit to 
characters < $80
 F25E 9AC5                           ORAA    CHRTMP          ;
 F260 A700                           STAA    ,X              ;
 F262 96C4                           LDAA    SETB7           ;
 F264 97C5                           STAA    CHRTMP          ;
 F266 8D05                           BSR     INCCRSR         ;
 F268 8D1E            SENDRESP       BSR     SET6845ADD      ; Set 6845 Start- 
and Cursor Address
 F26A 7EF19F                         JMP     SENDTX2         ; send packets 
(Header, Text and EOT)
                      ;--------------------------------------;
                      ; INCCRSR:
                      ; Scrolls down when CursorColumn is one less than 
Char_per_Line
                      ; Clears CursorColumn 
                      ; 
 F26D 969A            INCCRSR        LDAA    CursorColumn    ;
 F26F 4C                             INCA                    ;
 F270 979A                           STAA    CursorColumn    ;
 F272 91D2                           CMPA    Char_per_Line   ;
 F274 2611                           BNE     ZC287           ;
 F276 7F009A                         CLR     >CursorColumn   ;
 F279 7C009B                         INC     >CursorRow      ;
 F27C C618                           LDAB    #$18            ; no scroll below 
24
 F27E D19B                           CMPB    CursorRow       ;
 F280 2C03                           BGE     ZC285           ;
 F282 BDF570                         JSR     SCRLUP          ;
 F285 8D01            ZC285          BSR     SET6845ADD      ;
 F287 39              ZC287          RTS                     ;
                      ;--------------------------------------;
 F288 8D28            SET6845ADD     BSR     CALCRAMPOS      ;
 F28A DDCC                           STD     RAMTXTSTART     ;
 F28C C60C                           LDAB    #$0C            ; 
 F28E F74000                         STAB    M6845_0         ; Set Register c 
(Start Address H)
 F291 9698                           LDAA    _6845STRTADRH   ;
 F293 B74001                         STAA    M6845_1         ;
 F296 5C                             INCB                    ;
 F297 F74000                         STAB    M6845_0         ; Set Register d 
(Start Address L)
 F29A 9699                           LDAA    _6845STRTADRL   ;
 F29C B74001                         STAA    M6845_1         ;
 F29F 5C                             INCB                    ;
 F2A0 F74000                         STAB    M6845_0         ; Set Register e 
(Cursor H)
 F2A3 969C                           LDAA    _6845CRSRH      ;
 F2A5 B74001                         STAA    M6845_1         ;
 F2A8 5C                             INCB                    ;
 F2A9 F74000                         STAB    M6845_0         ; Set Register f 
(Cursor L)
 F2AC 969D                           LDAA    _6845CRSRL      ;
 F2AE B74001                         STAA    M6845_1         ;
 F2B1 39                             RTS                     ;
                      ;--------------------------------------;
 F2B2 C618            CALCRAMPOS     LDAB    #$18            ; $18 = 24 (Max. 
Rows-1)
 F2B4 D19B                           CMPB    CursorRow       ;
 F2B6 2C02                           BGE     LOCAL0d         ;
 F2B8 D79B                           STAB    CursorRow       ; limit CursorRow 
to $18 (=24)
 F2BA D69B            LOCAL0d        LDAB    CursorRow       ;
 F2BC 96D2                           LDAA    Char_per_Line   ; can be 32, 40, 
72 or 80
 F2BE 3D                             MUL                     ; 24*80=0x780 
(=1920)
 F2BF DB9A                           ADDB    CursorColumn    ;
 F2C1 8900                           ADCA    #$00            ; must be < $7D0
 F2C3 D398                           ADDD    _6845STRTADRH   ;
 F2C5 DD9C                           STD     _6845CRSRH      ;
 F2C7 C31000                         ADDD    #TEXTRAM        ;
 F2CA 39                             RTS                     ;
                      ;--------------------------------------;
 F2CB D6A1            SETDISPMOD     LDAB    TXTBUFA1        ; EPSPFUNC: $93
 F2CD D7D3                           STAB    GRAPHMOD        ; $01 if Graphics 
Mode
 F2CF 9602                           LDAA    P1DR            ;
 F2D1 C101                           CMPB    #$01            ; Check if 
Graphics Mode
 F2D3 2614                           BNE     SETTXTMOD       ; Graphics Mode 
here
 F2D5 8A40                           ORAA    #$40            ; Set T/G (P1.6)
 F2D7 9702                           STAA    P1DR            ;
 F2D9 CEF68F                         LDX     #MC6845_GRAPH   ; Load Settings 
for Graphics Mode
 F2DC 8650                           LDAA    #$50            ;
 F2DE BDF4DE                         JSR     W6845REG2       ;
 F2E1 CE0000                         LDX     #$0000          ;
 F2E4 DF98                           STX     _6845STRTADRH   ;
 F2E6 7EF268                         JMP     SENDRESP        ;
                      ;--------------------------------------;
 F2E9 8A02            SETTXTMOD      ORAA    #$02            ; Textmode
 F2EB 84BF                           ANDA    #$BF            ; Clear T/G 
(P1.6)
 F2ED 9702                           STAA    P1DR            ;
 F2EF BDF4D3                         JSR     CONF80          ; Configure for 
80 Char. Text
 F2F2 7EF558                         JMP     Home            ;
                      ;--------------------------------------;
 F2F5 DEA0            SETCRSR        LDX     TXTBUFA0A1      ;
 F2F7 DF9A                           STX     CursorColumn    ;
 F2F9 BDF288                         JSR     SET6845ADD      ;
*** warning 1: Long branch within short branch range could be optimized
 F2FC 2000                           BRA     SRLISTFLG       ; does nothing 
(jumps back to WAITHNDSHK)
                      ;--------------------------------------;
 F2FE 7EF03C          SRLISTFLG      JMP     WAITHNDSHK      ;
                      ;--------------------------------------;
 F301 DDD8            CONVXPXLCHAR   STD     TEMPD8D9        ; Converts 
X-Pixel to Character Pos.
 F303 8606                           LDAA    #$06            ;
 F305 97DA                           STAA    M00DA           ;
 F307 8D62                           BSR     CONV03          ;
 F309 D6D9                           LDAB    M00D9           ;
 F30B 5C                             INCB                    ;
 F30C D7A1                           STAB    TXTBUFA1        ;
 F30E 7F00A0                         CLR     >TXTBUFA0A1     ;
 F311 97CE                           STAA    M00CE           ;
 F313 4F                             CLRA                    ;
 F314 97D8                           STAA    TEMPD8D9        ;
 F316 8608                           LDAA    #$08            ;
 F318 97DA                           STAA    M00DA           ;
 F31A D6A3                           LDAB    TXTBUFA3        ;
 F31C D7D9                           STAB    M00D9           ;
 F31E 8D4B                           BSR     CONV03          ;
 F320 D6D9                           LDAB    M00D9           ;
 F322 D7AF                           STAB    TEMPAF          ;
 F324 C680                           LDAB    #$80            ;
 F326 3D                             MUL                     ;
 F327 DDAC                           STD     TEMPACAD        ;
 F329 8650                           LDAA    #$50            ;
 F32B D6AF                           LDAB    TEMPAF          ;
 F32D 3D                             MUL                     ;
 F32E D3A0                           ADDD    TXTBUFA0A1      ;
 F330 D7AE                           STAB    TEMPAEAF        ;
 F332 C480                           ANDB    #$80            ;
 F334 05                             ASLD                    ;
 F335 05                             ASLD                    ;
 F336 05                             ASLD                    ;
 F337 D6AE                           LDAB    TEMPAEAF        ;
 F339 C47F                           ANDB    #$7F            ;
 F33B D3AC                           ADDD    TEMPACAD        ;
 F33D C38000                         ADDD    #GRAPHICRAM     ;
 F340 37                             PSHB                    ;
 F341 36                             PSHA                    ;
 F342 38                             PULX                    ;
 F343 8680                           LDAA    #$80            ;
 F345 D6CE                           LDAB    M00CE           ;
 F347 2704                           BEQ     CONV02          ;
 F349 44              CONV01         LSRA                    ;
 F34A 5A                             DECB                    ;
 F34B 26FC                           BNE     CONV01          ;
 F34D E600            CONV02         LDAB    ,X              ;
 F34F 97CE                           STAA    M00CE           ;
 F351 39                             RTS                     ;
                      ;--------------------------------------;
 F352 8D02            SETPOINT       BSR     PUTPXL          ; EPSPFUNC: $C7
 F354 20A8            _SRLISTFLG1_   BRA     SRLISTFLG       ; does nothing 
(jumps back to WAITHNDSHK)
                      ;--------------------------------------;
 F356 DCA0            PUTPXL         LDD     TXTBUFA0A1      ; in A0A1 is the 
X Pos.
 F358 8DA7                           BSR     CONVXPXLCHAR    ;
 F35A 7D00A4                         TST     >TXTBUFA4A5     ;
 F35D 2705                           BEQ     PXL01           ;
 F35F DACE                           ORAB    M00CE           ;
 F361 E700            PXL02          STAB    ,X              ;
 F363 39                             RTS                     ;
                                                             ;
 F364 43              PXL01          COMA                    ;
 F365 97CE                           STAA    M00CE           ;
 F367 D4CE                           ANDB    M00CE           ;
 F369 20F6                           BRA     PXL02           ;
                      ;--------------------------------------;
 F36B CE0009          CONV03         LDX     #$0009          ;
 F36E DCD8                           LDD     TEMPD8D9        ;
 F370 90DA            CONV04         SUBA    M00DA           ;
 F372 2402                           BCC     CONV05          ;
 F374 9BDA                           ADDA    M00DA           ;
 F376 59              CONV05         ROLB                    ;
 F377 49                             ROLA                    ;
 F378 09                             DEX                     ;
 F379 26F5                           BNE     CONV04          ;
 F37B D7D9                           STAB    M00D9           ;
 F37D 46                             RORA                    ;
 F37E 59                             ROLB                    ;
 F37F 53                             COMB                    ;
 F380 C401                           ANDB    #$01            ;
 F382 D7D8                           STAB    TEMPD8D9        ;
 F384 7300D9                         COM     >M00D9          ;
 F387 39                             RTS                     ;
                      ;--------------------------------------;
 F388 8D09            DRAWLINE       BSR     DRWLN           ; EPSPFUNC: $C8
 F38A 20C8                           BRA     _SRLISTFLG1_    ; does nothing 
(jumps back to WAITHNDSHK)
                      ;--------------------------------------;
 F38C 43              ZC38C          COMA                    ;
 F38D 53                             COMB                    ;
 F38E CB01                           ADDB    #$01            ;
 F390 8900                           ADCA    #$00            ;
 F392 39                             RTS                     ;
                      ;--------------------------------------;
                      ; This funtion draws a line from       ;
                      ;  X1 , Y1 to  X2 , Y2                 ;
                      ; A0A1 A2A3   A4A5 A6A7                ;
                      ;--------------------------------------;
 F393 CE01DF          DRWLN          LDX     #$01DF          ; Limit to 479 
(prob. x direction)
 F396 9CA0                           CPX     TXTBUFA0A1      ; check Limit
 F398 2A02                           BPL     LIN01           ;
 F39A DFA0                           STX     TXTBUFA0A1      ;
 F39C 9CA4            LIN01          CPX     TXTBUFA4A5      ; check Limit
 F39E 2A02                           BPL     LIN02           ;
 F3A0 DFA4                           STX     TXTBUFA4A5      ;
 F3A2 CE00C7          LIN02          LDX     #$C7            ; Limit to 199
 F3A5 9CA2                           CPX     TXTBUFA2A3      ; check Limit
 F3A7 2A02                           BPL     LIN03           ;
 F3A9 DFA2                           STX     TXTBUFA2A3      ;
 F3AB 9CA6            LIN03          CPX     TXTBUFA6A7      ; check Limit
 F3AD 2A02                           BPL     LIN04           ;
 F3AF DFA6                           STX     TXTBUFA6A7      ;
 F3B1 CE0000          LIN04          LDX     #$0000          ;
 F3B4 DFBE                           STX     TEMPBEBF        ;
 F3B6 DFB8                           STX     TEMPB8B9        ;
 F3B8 DFBC                           STX     TEMPBCBD        ;
 F3BA DFBA                           STX     TEMPBABB        ;
 F3BC DEA0                           LDX     TXTBUFA0A1      ;
 F3BE DFB0                           STX     TEMPB0B1        ;
 F3C0 DEA2                           LDX     TXTBUFA2A3      ;
 F3C2 DFB2                           STX     TEMPB2B3        ;
 F3C4 DCA4                           LDD     TXTBUFA4A5      ;
 F3C6 93A0                           SUBD    TXTBUFA0A1      ;
 F3C8 2A05                           BPL     LIN05           ;
 F3CA 8DC0                           BSR     ZC38C           ;
 F3CC 7C00BE                         INC     >TEMPBEBF       ;
 F3CF DDB4            LIN05          STD     TEMPB4B5        ;
 F3D1 DCA6                           LDD     TXTBUFA6A7      ;
 F3D3 93A2                           SUBD    TXTBUFA2A3      ;
 F3D5 2A05                           BPL     LIN06           ;
 F3D7 8DB3                           BSR     ZC38C           ;
 F3D9 7C00BF                         INC     >TEMPBF         ;
 F3DC DDB6            LIN06          STD     TEMPB6B7        ;
 F3DE 96A8                           LDAA    TXTBUFA8A9      ; $01, used only 
in TestPicture
 F3E0 97A4                           STAA    TXTBUFA4A5      ;
 F3E2 DEB4                           LDX     TEMPB4B5        ;
 F3E4 DFD8                           STX     TEMPD8D9        ;
 F3E6 9CB6                           CPX     TEMPB6B7        ;
 F3E8 2B07                           BMI     LIN07           ;
 F3EA 7C00BC                         INC     >TEMPBCBD       ;
 F3ED DEB6                           LDX     TEMPB6B7        ;
 F3EF 2006                           BRA     LIN08           ;
                                                             ;
 F3F1 DEB6            LIN07          LDX     TEMPB6B7        ;
 F3F3 DFD8                           STX     TEMPD8D9        ;
 F3F5 DEB4                           LDX     TEMPB4B5        ;
 F3F7 DFDA            LIN08          STX     M00DA           ;
 F3F9 BDF466                         JSR     LIN17           ;
 F3FC DED8                           LDX     TEMPD8D9        ;
 F3FE DFC2                           STX     TEMPC2C3        ;
 F400 BDF490          LIN09          JSR     ZC490           ;
 F403 8D0E                           BSR     LIN0a           ;
 F405 96BC                           LDAA    TEMPBCBD        ;
 F407 2715                           BEQ     LIN0c           ;
 F409 8D33                           BSR     LIN10           ;
 F40B DEB4                           LDX     TEMPB4B5        ;
 F40D DFD8                           STX     TEMPD8D9        ;
 F40F DEB6                           LDX     TEMPB6B7        ;
 F411 2013                           BRA     LIN0d           ;
                                                             ;
 F413 DEB4            LIN0a          LDX     TEMPB4B5        ;
 F415 2606                           BNE     LIN0b           ;
 F417 DEB6                           LDX     TEMPB6B7        ;
 F419 2602                           BNE     LIN0b           ;
 F41B 31                             INS                     ;
 F41C 31                             INS                     ;
 F41D 39              LIN0b          RTS                     ;
                                                             ;
 F41E 8D32            LIN0c          BSR     LIN14           ;
 F420 DEB6                           LDX     TEMPB6B7        ;
 F422 DFD8                           STX     TEMPD8D9        ;
 F424 DEB4                           LDX     TEMPB4B5        ;
 F426 DFDA            LIN0d          STX     M00DA           ;
 F428 8D3C                           BSR     LIN17           ;
 F42A DED8                           LDX     TEMPD8D9        ;
 F42C 9CC2                           CPX     TEMPC2C3        ;
 F42E 2B06                           BMI     LIN0f           ;
 F430 20CE                           BRA     LIN09           ;
                                                             ;
 F432 8D0A            LIN0e          BSR     LIN10           ;
 F434 20CA                           BRA     LIN09           ;
                                                             ;
 F436 96BC            LIN0f          LDAA    TEMPBCBD        ;
 F438 27F8                           BEQ     LIN0e           ;
 F43A 8D16                           BSR     LIN14           ;
 F43C 20C2                           BRA     LIN09           ;
                                                             ;
 F43E DEB4            LIN10          LDX     TEMPB4B5        ;
 F440 270F                           BEQ     LIN13           ;
 F442 09                             DEX                     ;
 F443 DFB4                           STX     TEMPB4B5        ;
 F445 DEB0                           LDX     TEMPB0B1        ;
 F447 96BE                           LDAA    TEMPBEBF        ;
 F449 2603                           BNE     LIN11           ;
 F44B 08                             INX                     ;
 F44C 2001                           BRA     LIN12           ;
                                                             ;
 F44E 09              LIN11          DEX                     ;
 F44F DFB0            LIN12          STX     TEMPB0B1        ;
 F451 39              LIN13          RTS                     ;
                                                             ;
 F452 DEB6            LIN14          LDX     TEMPB6B7        ;
 F454 27FB                           BEQ     LIN13           ;
 F456 09                             DEX                     ;
 F457 DFB6                           STX     TEMPB6B7        ;
 F459 DEB2                           LDX     TEMPB2B3        ;
 F45B 96BF                           LDAA    TEMPBF          ;
 F45D 2603                           BNE     LIN15           ;
 F45F 08                             INX                     ;
 F460 2001                           BRA     LIN16           ;
                                                             ;
 F462 09              LIN15          DEX                     ;
 F463 DFB2            LIN16          STX     TEMPB2B3        ;
 F465 39                             RTS                     ;
                                                             ;
 F466 DCD8            LIN17          LDD     TEMPD8D9        ;
 F468 05                             ASLD                    ;
 F469 05                             ASLD                    ;
 F46A 05                             ASLD                    ;
 F46B 05                             ASLD                    ;
 F46C 05                             ASLD                    ;
 F46D 05                             ASLD                    ;
 F46E DDD8                           STD     TEMPD8D9        ;
 F470 8611                           LDAA    #$11            ;
 F472 97C1                           STAA    RXTXCNT         ;
 F474 4F                             CLRA                    ;
 F475 5F                             CLRB                    ;
 F476 93DA            LIN18          SUBD    M00DA           ;
 F478 2402                           BCC     LIN19           ;
 F47A D3DA                           ADDD    M00DA           ;
 F47C 7900D9          LIN19          ROL     >M00D9          ;
 F47F 7900D8                         ROL     >TEMPD8D9       ;
 F482 59                             ROLB                    ;
 F483 49                             ROLA                    ;
 F484 7A00C1                         DEC     >RXTXCNT        ;
 F487 26ED                           BNE     LIN18           ;
 F489 7300D9                         COM     >M00D9          ;
 F48C 7300D8                         COM     >TEMPD8D9       ;
 F48F 39                             RTS                     ;
                                                             ;
 F490 DEB0            ZC490          LDX     TEMPB0B1        ;
 F492 DFA0                           STX     TXTBUFA0A1      ;
 F494 DEB2                           LDX     TEMPB2B3        ;
 F496 DFA2                           STX     TXTBUFA2A3      ;
 F498 7EF356                         JMP     PUTPXL          ; actually put 
the pixel on screen
                      ;--------------------------------------;
 F49B 2014            SETLINETERM    BRA     _WAITHNDSHK1_   ;
                      ;--------------------------------------;
 F49D 7D00D3          GRAMSETUP      TST     >GRAPHMOD       ; Check if 
Graphics Mode
 F4A0 270C                           BEQ     LOCAL06         ; if not Return
 F4A2 CE8000          ClearGRAM      LDX     #GRAPHICRAM     ;
 F4A5 4F                             CLRA                    ;
 F4A6 A700            LOOP07         STAA    ,X              ;
 F4A8 08                             INX                     ;
 F4A9 8CC000                         CPX     #GRAMEND        ;
 F4AC 26F8                           BNE     LOOP07          ;
 F4AE 39              LOCAL06        RTS                     ;
                      ;--------------------------------------;
 F4AF 8DEC            CLRGRAPH       BSR     GRAMSETUP       ; EPSPFUNC: $ca
 F4B1 7EF03C          _WAITHNDSHK1_  JMP     WAITHNDSHK      ;
                      ;--------------------------------------;
 F4B4 8DE7            Graphic_CLR    BSR     GRAMSETUP       ; Char: $F6
 F4B6 7EF268          _SENDRESP1_    JMP     SENDRESP        ;
                      ;--------------------------------------;
 F4B9 8D18            Set_80Char     BSR     CONF80          ; Char: $F8
 F4BB 20F9                           BRA     _SENDRESP1_     ;
                      ;--------------------------------------;
 F4BD 8648            Set_72Char     LDAA    #$48            ; Char: $F7
 F4BF 8D14                           BSR     CONF72          ;
 F4C1 C101                           CMPB    #$01            ;
 F4C3 27F1                           BEQ     _SENDRESP1_     ;
 F4C5 CE0148                         LDX     #$0148          ;
 F4C8 FF4000                         STX     M6845_0         ; Set Register 1 
(Hor. Displayed) to 0x48 - 72
 F4CB CE0250                         LDX     #$0250          ;
 F4CE FF4000                         STX     M6845_0         ; Set Register 2 
(Hor. Sync Pos.) to 0x50 - 80
 F4D1 20E3                           BRA     _SENDRESP1_     ;
                      ;--------------------------------------;
 F4D3 8650            CONF80         LDAA    #$50            ;
 F4D5 C601            CONF72         LDAB    #$01            ;
 F4D7 D1D3                           CMPB    GRAPHMOD        ; Check if 
Graphics Mode
 F4D9 2739                           BEQ     _RTS2_          ; if yes Return
 F4DB CEF65E                         LDX     #MC6845_7280Z   ;
 F4DE 97D2            W6845REG2      STAA    Char_per_Line   ; Akku can be 72 
or 80
 F4E0 8680                           LDAA    #$80            ;
 F4E2 36              W6845REG1      PSHA                    ;
 F4E3 5F                             CLRB                    ;
 F4E4 F74000          LOCAL0c        STAB    M6845_0         ; Write all 16 
Registers of 6845
 F4E7 A600                           LDAA    ,X              ;
 F4E9 B74001                         STAA    M6845_1         ;
 F4EC 08                             INX                     ;
 F4ED 5C                             INCB                    ;
 F4EE C110                           CMPB    #$10            ; Check if 
finished
 F4F0 26F2                           BNE     LOCAL0c         ;
 F4F2 9602                           LDAA    P1DR            ;
 F4F4 847F                           ANDA    #$7F            ; Mask P1.7 
(HIGHRES) off
 F4F6 33                             PULB                    ; Holds $80
 F4F7 1B                             ABA                     ;
 F4F8 9702                           STAA    P1DR            ; Set HIGHRES
 F4FA 7EF12E                         JMP     RSTTXTSCRN      ;
                      ;--------------------------------------;
 F4FD D6D2            DelLine        LDAB    Char_per_Line   ; Char: $04 and 
$05
 F4FF D09A                           SUBB    CursorColumn    ;
 F501 8D08                           BSR     ZC50B           ;
 F503 2064                           BRA     _SENDRESP2_     ;
                      ;--------------------------------------;
 F505 D6D2            CLRLINE        LDAB    Char_per_Line   ; belongs to 
SCRLUP
 F507 DBD2                           ADDB    Char_per_Line   ; two lines
 F509 C020                           SUBB    #$20            ; minus 32 
characters
 F50B 4F              ZC50B          CLRA                    ;
 F50C DECC                           LDX     RAMTXTSTART     ;
 F50E A700            ZC50E          STAA    ,X              ; Clear the next 
~1.5 Lines
 F510 08                             INX                     ;
 F511 5A                             DECB                    ;
 F512 26FA                           BNE     ZC50E           ;
 F514 39              _RTS2_         RTS                     ;
                      ;--------------------------------------;
 F515 7A009A          CRSRLFT        DEC     >CursorColumn   ;
 F518 2A0A                           BPL     ZC524           ;
 F51A 96D2                           LDAA    Char_per_Line   ;
 F51C 4A                             DECA                    ;
 F51D 979A                           STAA    CursorColumn    ;
 F51F 7A009B                         DEC     >CursorRow      ;
 F522 2B32                           BMI     ZC556           ;
 F524 7EF288          ZC524          JMP     SET6845ADD      ;
                      ;--------------------------------------;
 F527 DECC            DeleteChar     LDX     RAMTXTSTART     ; Char: $08
 F529 09                             DEX                     ;
 F52A E600                           LDAB    ,X              ;
 F52C 273B                           BEQ     _SENDRESP2_     ;
 F52E 8DE5                           BSR     CRSRLFT         ;
 F530 DECC                           LDX     RAMTXTSTART     ;
 F532 E601            ZC532          LDAB    $01,X           ;
 F534 E700                           STAB    ,X              ;
 F536 08                             INX                     ;
 F537 C100                           CMPB    #$00            ;
 F539 26F7                           BNE     ZC532           ;
 F53B 202C                           BRA     _SENDRESP2_     ;
                      ;--------------------------------------;
 F53D D69A            TABHOR         LDAB    CursorColumn    ; Char: $09
 F53F 8608            ZC53F          LDAA    #$08            ;
 F541 C008                           SUBB    #$08            ;
 F543 2AFA                           BPL     ZC53F           ;
 F545 CB08                           ADDB    #$08            ;
 F547 10                             SBA                     ;
 F548 9B9A                           ADDA    CursorColumn    ;
 F54A 91D2                           CMPA    Char_per_Line   ;
 F54C 2604                           BNE     ZC552           ;
 F54E 4F                             CLRA                    ;
 F54F 7C009B                         INC     >CursorRow      ;
 F552 979A            ZC552          STAA    CursorColumn    ;
 F554 2013                           BRA     _SENDRESP2_     ;
                      ;--------------------------------------;
 F556 31              ZC556          INS                     ;
 F557 31                             INS                     ;
                      ;--------------------------------------;
 F558 CE0000          Home           LDX     #$0000          ; Char: $0B
 F55B DFC8                           STX     TMPCRSRRW       ;
 F55D DF9A                           STX     CursorColumn    ;
 F55F 2008                           BRA     _SENDRESP2_     ;
                      ;--------------------------------------;
 F561 BDF12E          ClearScreen    JSR     RSTTXTSCRN      ; Char: $0C
 F564 2003                           BRA     _SENDRESP2_     ;
                      ;--------------------------------------;
 F566 7F009A          Enter          CLR     >CursorColumn   ; Char: $01 and 
$0D
 F569 7EF268          _SENDRESP2_    JMP     SENDRESP        ;
                      ;--------------------------------------;
 F56C 8D02            ZC56C          BSR     SCRLUP          ;
 F56E 20F9            _SENDRESP6_    BRA     _SENDRESP2_     ;
                      ;--------------------------------------;
                      ; SCRLUP: 
                      ; Moves Window up one Line, deletes the next ~1.5 Lines 
in Memory, adjusts 6845 Start Address and RAM Start Addr.
                      ; CursorRow must be $18 to Scroll, Clears CursorColumn
                      ; Terminates with RTS
                      ;
 F570 DE98            SCRLUP         LDX     _6845STRTADRH   ;
 F572 D6D2                           LDAB    Char_per_Line   ;
 F574 3A                             ABX                     ;
 F575 DF98                           STX     _6845STRTADRH   ; add 
Char_per_Line to _6845STRTADRH
 F577 DECC                           LDX     RAMTXTSTART     ;
 F579 3A                             ABX                     ;
 F57A 7C009B                         INC     >CursorRow      ;
 F57D 8618                           LDAA    #$18            ; load last row 
(=24)
 F57F 919B                           CMPA    CursorRow       ;
 F581 2C91                           BGE     _RTS2_          ; no scroll below 
24
 F583 979B                           STAA    CursorRow       ; limit CursorRow 
to $18
 F585 7F009A                         CLR     >CursorColumn   ;
 F588 DFCC                           STX     RAMTXTSTART     ; add 
Char_per_Line to RAMTXTSTART
 F58A 9602                           LDAA    P1DR            ;
 F58C 84BF                           ANDA    #$BF            ; Clear T/G 
(P1.6)
 F58E 9702                           STAA    P1DR            ;
 F590 9698                           LDAA    _6845STRTADRH   ;
 F592 8407                           ANDA    #$07            ; Limit to 7FF
 F594 9798                           STAA    _6845STRTADRH   ;
 F596 96CC                           LDAA    RAMTXTSTART     ;
 F598 8417                           ANDA    #$17            ; limit to $17FF
 F59A 97CC                           STAA    RAMTXTSTART     ;
 F59C BDF288                         JSR     SET6845ADD      ;
 F59F 7EF505                         JMP     CLRLINE         ; clear the next 
~1.5 Lines
                      ;--------------------------------------; belongs to 
MovCRSR_Up
                      ; SCRLDWN:
                      ; doesn't actually scroll anywhere, it just moves the 
cursor up until first line
                      ;
 F5A2 DC98            SCRLDWN        LDD     _6845STRTADRH   ;
 F5A4 27C8                           BEQ     _SENDRESP6_     ;
 F5A6 969B                           LDAA    CursorRow       ;
 F5A8 4A                             DECA                    ;
 F5A9 979B                           STAA    CursorRow       ;
 F5AB D0D2                           SUBB    Char_per_Line   ;
 F5AD 8200                           SBCA    #$00            ;
 F5AF DD98                           STD     _6845STRTADRH   ;
 F5B1 20BB                           BRA     _SENDRESP6_     ;
                      ;--------------------------------------;
 F5B3 DECC            ToggleInsertMd LDX     RAMTXTSTART     ; Char: $12
 F5B5 08              ZC5B5          INX                     ;
 F5B6 A600                           LDAA    ,X              ;
 F5B8 26FB                           BNE     ZC5B5           ;
 F5BA A701                           STAA    $01,X           ;
 F5BC 09              ZC5BC          DEX                     ;
 F5BD A600                           LDAA    ,X              ;
 F5BF A701                           STAA    $01,X           ;
 F5C1 9CCC                           CPX     RAMTXTSTART     ;
 F5C3 2CF7                           BGE     ZC5BC           ;
 F5C5 8620                           LDAA    #$20            ;
 F5C7 A701                           STAA    $01,X           ;
 F5C9 7EF19F                         JMP     SENDTX2         ;
                      ;--------------------------------------;
 F5CC 96C6            Set_CRSR_Blink LDAA    _6845CRSRREG    ; Char: $F5
 F5CE 8860                           EORA    #$60            ;
 F5D0 97C6                           STAA    _6845CRSRREG    ;
                      ;--------------------------------------;
 F5D2 96C6            Set_CRSR_On    LDAA    _6845CRSRREG    ; Char: $16
 F5D4 2002                           BRA     LOCAL05         ;
                      ;--------------------------------------;
 F5D6 8620            Set_CRSR_Off   LDAA    #$20            ; Char: $17
 F5D8 8D58            LOCAL05        BSR     Write_CRSR_Reg  ;
 F5DA 7EF268          _SENDRESP3_    JMP     SENDRESP        ;
                      ;--------------------------------------;
 F5DD 8D02            DelScreen      BSR     CLRSCRN         ; Char: $1A
 F5DF 20F9            _SENDRESP7_    BRA     _SENDRESP3_     ;
                      ;--------------------------------------;
 F5E1 96CC            CLRSCRN        LDAA    RAMTXTSTART     ;
 F5E3 8417                           ANDA    #$17            ; limit to 17FF 
(now $1FFF)
 F5E5 97CC                           STAA    RAMTXTSTART     ;
 F5E7 DECC                           LDX     RAMTXTSTART     ;
 F5E9 4F                             CLRA                    ;
 F5EA A700            LOCAL02        STAA    ,X              ;
 F5EC 08                             INX                     ;
 F5ED 8C1800                         CPX     #TRAMEND        ; End of TRAM 
(Ch. from 0x1800 to 0x2000)
 F5F0 26F8                           BNE     LOCAL02         ;
 F5F2 39                             RTS                     ;
                      ;--------------------------------------;
 F5F3 7C009A          MovCRSR_Rgt    INC     >CursorColumn   ; Char: $1C
 F5F6 D6D2                           LDAB    Char_per_Line   ;
 F5F8 D19A                           CMPB    CursorColumn    ;
 F5FA 26E3                           BNE     _SENDRESP7_     ;
 F5FC 7F009A                         CLR     >CursorColumn   ;
 F5FF 7C009B                         INC     >CursorRow      ;
 F602 20DB                           BRA     _SENDRESP7_     ;
                      ;--------------------------------------;
 F604 BDF515          MovCRSR_Lft    JSR     CRSRLFT         ; Char: $1D
 F607 20D6                           BRA     _SENDRESP7_     ;
                      ;--------------------------------------;
 F609 969B            MovCRSR_Up     LDAA    CursorRow       ; Char: $10 and 
$1E
 F60B 27D2                           BEQ     _SENDRESP7_     ;
 F60D 8119                           CMPA    #$19            ;
 F60F 2B03                           BMI     ZC614           ;
 F611 7EF5A2                         JMP     SCRLDWN         ;
*** warning 1: Long branch within short branch range could be optimized
                                                             ;
 F614 4A              ZC614          DECA                    ;
 F615 979B            ZC615          STAA    CursorRow       ;
 F617 20C6                           BRA     _SENDRESP7_     ;
                      ;--------------------------------------;
 F619 96D1            Linefeed       LDAA    M00D1           ; Char: $0A
 F61B 2709                           BEQ     MovCRSR_Dwn     ;
 F61D 7F00D1                         CLR     >M00D1          ;
 F620 969B                           LDAA    CursorRow       ;
 F622 8118                           CMPA    #$18            ;
 F624 2BB9                           BMI     _SENDRESP7_     ;
                      ;--------------------------------------;
 F626 969B            MovCRSR_Dwn    LDAA    CursorRow       ; Char: $11 and 
$1F
 F628 8118                           CMPA    #$18            ; compare with 
last line (=24)
 F62A 2B03                           BMI     ZC62F           ;
 F62C 7EF56C                         JMP     ZC56C           ; if in last 
line: jump to SCRLUP + SENDRESP
                                                             ;
 F62F 4C              ZC62F          INCA                    ; not in last 
line
 F630 20E3                           BRA     ZC615           ; STA CursorRow + 
SENDRESP
                      ;--------------------------------------; belongs to 
Set_CRSR_Off
 F632 C60A            Write_CRSR_Reg LDAB    #$0A            ;
 F634 F74000                         STAB    M6845_0         ;
 F637 B74001                         STAA    M6845_1         ;
 F63A 39              _RTS1_         RTS                     ;
                      ;--------------------------------------;
 F63B 8D31            Set_40Char     BSR     CONF40          ; Char: $F4
 F63D 20A0            _SENDRESP8_    BRA     _SENDRESP7_     ;
                      ;--------------------------------------;
 F63F 8620            Set_32Char     LDAA    #$20            ; Char: $F3
 F641 8D2D                           BSR     CONF32          ;
 F643 C101                           CMPB    #$01            ;
 F645 2798                           BEQ     _SENDRESP7_     ;
 F647 CE0120                         LDX     #$0120          ;  Set Register 1 
(Hor. Displayed) to 0x20 - 32
 F64A FF4000                         STX     M6845_0         ;
 F64D CE0228                         LDX     #$0228          ;  Set Register 2 
(Hor. Sync Pos.) to 0x28 - 40
 F650 FF4000                         STX     M6845_0         ;
 F653 20E8            _SENDRESP9_    BRA     _SENDRESP8_     ;
                      ;--------------------------------------;
 F655 020003FB        SendPKT_00     FCB     $02,$00,$03,$FB ;
 F659 0250190392      SCRNSZ8025     FCB     $02,$50,$19,$03,$92 ; Message 
Packet for 80x25 Screen Size
 F65E 62              MC6845_7280Z   FCB     $62             ; Set Register 0 
(H Total) - 98
 F65F 50                             FCB     $50             ; Set Register 1 
(H Displayed) - 80
 F660 54                             FCB     $54             ; Set Register 2 
(H Sync. Pos.) - 84
 F661 29                             FCB     $29             ; Set Register 3 
(Sync. Width) - 41
 F662 1E                             FCB     $1E             ; Set Register 4 
(V Total) - 30
 F663 00                             FCB     $00             ; Set Register 5 
(V Total Adj.)
 F664 19                             FCB     $19             ; Set Register 6 
(V Displayed) - 25
 F665 1B                             FCB     $1B             ; Set Register 7 
(V Sync. Pos.) - 27
 F666 52                             FCB     $52             ; Set Register 8 
(Interlace Md. and Skew) - 162
 F667 09                             FCB     $09             ; Set Register 9 
(Max. Scanline Address)
 F668 00                             FCB     $00             ; Set Register 10 
(Crsr Start)
 F669 10                             FCB     $10             ; Set Register 11 
(Crsr End) - 16
 F66A 00                             FCB     $00             ; Set Register 12 
(Start Address H)
 F66B 00                             FCB     $00             ; Set Register 13 
(Start Address L)
 F66C 00                             FCB     $00             ; Set Register 14 
(Crsr H)
 F66D 00                             FCB     $00             ; Set Register 15 
(Crsr L)
                      ;--------------------------------------;
 F66E 8628            CONF40         LDAA    #$28            ;
 F670 D6D3            CONF32         LDAB    GRAPHMOD        ;
 F672 C101                           CMPB    #$01            ; Check if 
Graphics Mode
 F674 27C4                           BEQ     _RTS1_          ; if yes Return
 F676 CEF67F                         LDX     #MC6845_3240Z   ;
 F679 97D2                           STAA    Char_per_Line   ; Akku can be 32, 
40
 F67B 4F                             CLRA                    ;
 F67C 7EF4E2                         JMP     W6845REG1       ;
                      ;--------------------------------------;
 F67F 30              MC6845_3240Z   FCB     $30             ; Set Register 0 
(H Total) - 48
 F680 28                             FCB     $28             ; Set Register 1 
(H Displayed) - 40
 F681 2B                             FCB     $2B             ; Set Register 2 
(H Sync. Pos.) - 43
 F682 43                             FCB     $43             ; Set Register 3 
(Sync. Width) - 67
 F683 1D                             FCB     $1D             ; Set Register 4 
(V Total) - 29
 F684 0C                             FCB     $0C             ; Set Register 5 
(V Total Adj.) - 12
 F685 19                             FCB     $19             ; Set Register 6 
(V Displayed) - 25
 F686 1B                             FCB     $1B             ; Set Register 7 
(V Sync. Pos.) - 27
 F687 50                             FCB     $50             ; Set Register 8 
(Interlace Md. and Skew) - 160
 F688 09                             FCB     $09             ; Set Register 9 
(Max. Scanline Address)
 F689 00                             FCB     $00             ; Set Register 10 
(Crsr Start)
 F68A 10                             FCB     $10             ; Set Register 11 
(Crsr End) - 16
 F68B 00                             FCB     $00             ; Set Register 12 
(Start Address H)
 F68C 00                             FCB     $00             ; Set Register 13 
(Start Address L)
 F68D 00                             FCB     $00             ; Set Register 14 
(Crsr H)
 F68E 00                             FCB     $00             ; Set Register 15 
(Crsr L)
 F68F 62              MC6845_GRAPH   FCB     $62             ; Set Register 0 
(H Total) - 98
 F690 50                             FCB     $50             ; Set Register 1 
(H Displayed) - 80
 F691 53                             FCB     $53             ; Set Register 2 
(H Sync. Pos.) - 83
 F692 29                             FCB     $29             ; Set Register 3 
(Sync. Width) - 41
 F693 26                             FCB     $26             ; Set Register 4 
(V Total) - 38
 F694 00                             FCB     $00             ; Set Register 5 
(V Total Adj.)
 F695 19                             FCB     $19             ; Set Register 6 
(V Displayed) - 25
 F696 1F                             FCB     $1F             ; Set Register 7 
(V Sync. Pos.) - 31
 F697 50                             FCB     $50             ; Set Register 8 
(Interlace Md. and Skew) - 160
 F698 07                             FCB     $07             ; Set Register 9 
(Max. Scanline Address)
 F699 00                             FCB     $00             ; Set Register 10 
(Crsr Start)
 F69A 07                             FCB     $07             ; Set Register 11 
(Crsr End)
 F69B 00                             FCB     $00             ; Set Register 12 
(Start Address H)
 F69C 00                             FCB     $00             ; Set Register 13 
(Start Address L)
 F69D 00                             FCB     $00             ; Set Register 14 
(Crsr H)
 F69E 00                             FCB     $00             ; Set Register 15 
(Crsr L)
 F69F 0101            HDRDAT01       FCB     $01,$01         ;
 F6A1 2030            HDRDAT02       FCB     $20,$30         ;
                      ;--------------------------------------;
 F6A3 01              CTRLTAB        FCB     $01             ;
 F6A4 F566                           FDB     Enter           ;
 F6A6 0E                             FCB     $0E             ; CTRL + N - ?
 F6A7 F71C                           FDB     SPCLCHAR        ;
 F6A9 04                             FCB     $04             ; CTRL + D or -> 
- Move Cursor
 F6AA F4FD                           FDB     DelLine         ;
 F6AC 05                             FCB     $05             ; CTRL + E - 
Delete to EOL
 F6AD F4FD                           FDB     DelLine         ;
 F6AF 06                             FCB     $06             ; CTRL + F - 
Cursor to right edge
 F6B0 F714                           FDB     TGLINVERS       ;
 F6B2 07                             FCB     $07             ; CTRL + G - ? 
Make Sound (in MH20 Emulator)
 F6B3 F70C                           FDB     TGLINTENS       ;
 F6B5 08                             FCB     $08             ; CTRL + H - 
Delete one char.
 F6B6 F527                           FDB     DeleteChar      ;
 F6B8 09                             FCB     $09             ; CTRL + I - Hor. 
TAB
 F6B9 F53D                           FDB     TABHOR          ;
 F6BB 0A                             FCB     $0A             ; CTRL + J - 
Linefeed
 F6BC F619                           FDB     Linefeed        ;
 F6BE 0B                             FCB     $0B             ; CTRL + K - Home
 F6BF F558                           FDB     Home            ;
 F6C1 0C                             FCB     $0C             ; CTRL + L - 
Clear Screen
 F6C2 F561                           FDB     ClearScreen     ;
 F6C4 0D                             FCB     $0D             ; CTRL + M - 
Enter
 F6C5 F566                           FDB     Enter           ;
 F6C7 10                             FCB     $10             ; CTRL + P - Move 
Window up - new functions
 F6C8 F609                           FDB     MovCRSR_Up      ;
 F6CA 11                             FCB     $11             ; CTRL + Q - Move 
Window down - new functions
 F6CB F626                           FDB     MovCRSR_Dwn     ;
 F6CD 12                             FCB     $12             ; CTRL + R - 
Toggle Insert Mode
 F6CE F5B3                           FDB     ToggleInsertMd  ;
 F6D0 16                             FCB     $16             ; CTRL + V - Make 
Cursor visible
 F6D1 F5D2                           FDB     Set_CRSR_On     ;
 F6D3 17                             FCB     $17             ; CTRL + W - Make 
Cursor invisible
 F6D4 F5D6                           FDB     Set_CRSR_Off    ;
 F6D6 1A                             FCB     $1A             ; CTRL + Z - 
Delete Cursor to end of screen
 F6D7 F5DD                           FDB     DelScreen       ;
 F6D9 1C                             FCB     $1C             ; CTRL + \ - Move 
Cursor right
 F6DA F5F3                           FDB     MovCRSR_Rgt     ;
 F6DC 1D                             FCB     $1D             ; CTRL + ] - Move 
Cursor left
 F6DD F604                           FDB     MovCRSR_Lft     ;
 F6DF 1E                             FCB     $1E             ; CTRL + ^ - Move 
Cursor up
 F6E0 F609                           FDB     MovCRSR_Up      ;
 F6E2 1F                             FCB     $1F             ; CTRL + _ - Move 
Cursor down
 F6E3 F626                           FDB     MovCRSR_Dwn     ;
 F6E5 F0                             FCB     $F0             ; CTRL + 0 - 
TestPicture (Graphic Mode) (Enter Screen1,1, then CTRL+0)
 F6E6 F75E                           FDB     TestPicture     ;
 F6E8 F1                             FCB     $F1             ; CTRL + 1 - Text 
On/Off
 F6E9 F226                           FDB     TEXTON_OFF      ;
 F6EB F2                             FCB     $F2             ; CTRL + 2 - 
Inverted Text
 F6EC F22E                           FDB     INVERTTEXT      ;
 F6EE F3                             FCB     $F3             ; CTRL + 3 - 32 
Characters
 F6EF F63F                           FDB     Set_32Char      ;
 F6F1 F4                             FCB     $F4             ; CTRL + 4 - 40 
Characters
 F6F2 F63B                           FDB     Set_40Char      ;
 F6F4 F5                             FCB     $F5             ; CTRL + 5 - 
Cursor Blink
 F6F5 F5CC                           FDB     Set_CRSR_Blink  ;
 F6F7 F6                             FCB     $F6             ; CTRL + 6 - 
Graphics Clear Screen
 F6F8 F4B4                           FDB     Graphic_CLR     ;
 F6FA F7                             FCB     $F7             ; CTRL + 7 - 72 
Characters
 F6FB F4BD                           FDB     Set_72Char      ;
 F6FD F8                             FCB     $F8             ; CTRL + 8 - 80 
Characters
 F6FE F4B9                           FDB     Set_80Char      ;
 F700 F9                             FCB     $F9             ; CTRL + 9 - 
second Charset
 F701 F703                           FDB     SwitchCharset   ;
 F703 9602            SwitchCharset  LDAA    P1DR            ;
 F705 8820                           EORA    #$20            ; Toggle Charset 
(P1.5)
                      ;--------------------------------------;
 F707 9702            ZC707          STAA    P1DR            ;
 F709 7EF268          _SENDRESP4_    JMP     SENDRESP        ;
                      ;--------------------------------------;
 F70C 9602            TGLINTENS      LDAA    P1DR            ; Char: $07, 
Toggle INTENSITY (P1.2 - Pin15), Set INVERSE (P1.3 - Pin16)
 F70E 8A08                           ORAA    #$08            ; 
 F710 8804                           EORA    #$04            ;
 F712 20F3                           BRA     ZC707           ;
                      ;--------------------------------------;
 F714 9602            TGLINVERS      LDAA    P1DR            ; Char: $06, 
Toggle INVERSE (P1.3 - Pin16), Set INTENSITY (P1.2 - Pin15)
 F716 8A04                           ORAA    #$04            ;
 F718 8808                           EORA    #$08            ;
 F71A 20EB                           BRA     ZC707           ;
                      ;--------------------------------------;
 F71C 8680            SPCLCHAR       LDAA    #$80            ; Char: $0E, Sets 
Bit 7 of the next character
 F71E 98C4                           EORA    SETB7           ;
 F720 97C4                           STAA    SETB7           ;
 F722 20E5                           BRA     _SENDRESP4_     ;
                      ;--------------------------------------;
 F724 88              EPSPFUNC       FCB     $88             ; READ SCREEN 
SIZE (L.C)
 F725 F185                           FDB     SCRNSIZE        ;
 F727 89                             FCB     $89             ; GET PHYSICAL 
SCREEN SIZE (L.C)
 F728 F185                           FDB     SCRNSIZE        ;
 F72A 8C                             FCB     $8C             ; GET CURSOR 
POSITION
 F72B F196                           FDB     GCRSRPOS        ;
 F72D 8F                             FCB     $8F             ; GET POINT ON 
THE DISPLAY (L.C)
 F72E F1BC                           FDB     GETPOINT        ;
 F730 91                             FCB     $91             ; READ THE EXTEND 
OF CURRENT LINE (L.C)
 F731 F1D7                           FDB     READLINE        ;
 F733 92                             FCB     $92             ; WRITE ONE 
CHARACTER TO VIRTUAL SCREEN (L.C)
 F734 F252                           FDB     WRITECHAR       ;
 F736 93                             FCB     $93             ; SET DISPLAY 
MODE (C)
 F737 F2CB                           FDB     SETDISPMOD      ;
 F739 97                             FCB     $97             ; READ CHARACTERS 
FROM VS. (L,C)
 F73A F14A                           FDB     READCHAR        ;
 F73C 98                             FCB     $98             ; WRITE ONE 
CHARACTER TO VS AND GET EXTEND OF NEW CURSOR POSITION.(L,C)
 F73D F252                           FDB     WRITECHAR       ;
 F73F C2                             FCB     $C2             ; SET CURSOR 
POSITION ON THE VIRTUAL SCREEN (L.C)
 F740 F2F5                           FDB     SETCRSR         ;
 F742 C5                             FCB     $C5             ; SET LIST FLAG 
(L.C)
 F743 F2FE                           FDB     SRLISTFLG       ;
 F745 C6                             FCB     $C6             ; RESET LIST FLAG 
(L.C)
 F746 F2FE                           FDB     SRLISTFLG       ;
 F748 C7                             FCB     $C7             ; SET POINT TO 
DISPLAY (L.C)
 F749 F352                           FDB     SETPOINT        ;
 F74B C8                             FCB     $C8             ; DRAW LINE TO 
DISPLAY (L.C)
 F74C F388                           FDB     DRAWLINE        ;
 F74E C9                             FCB     $C9             ; SET LINE 
TERMINATE POSITION (L.C)
 F74F F49B                           FDB     SETLINETERM     ;
 F751 CA                             FCB     $CA             ; CLEAR THE 
GRAPHICS SCREEN. (L.C)
 F752 F4AF                           FDB     CLRGRAPH        ;
 F754 CB                             FCB     $CB             ; SET SCRLUPSPEED 
(C)
 F755 F12B                           FDB     DISABLED        ;
 F757 CF                             FCB     $CF             ; COLOR SET 
SELECT (C) 
 F758 F12B                           FDB     DISABLED        ;
 F75A D4                             FCB     $D4             ; ?
 F75B F12B                           FDB     DISABLED        ;
 F75D 01              EPSEND         FCB     $01             ;
                      ;--------------------------------------;
 F75E 7D00D3          TestPicture    TST     >GRAPHMOD       ; Char: $F0, 
Check if Graphics Mode
 F761 2732                           BEQ     _SENDRESP5_     ; if no Return
 F763 BDF49D                         JSR     GRAMSETUP       ;
 F766 860A                           LDAA    #10             ;
 F768 97D3                           STAA    GRAPHMOD        ;
 F76A CEF798                         LDX     #DATATAB        ;
 F76D DFCA                           STX     TEMP16_01       ;
 F76F DECA            TP01           LDX     TEMP16_01       ;
 F771 EC00                           LDD     ,X              ;
 F773 DDA0                           STD     TXTBUFA0A1      ;
 F775 EC02                           LDD     $02,X           ;
 F777 DDA2                           STD     TXTBUFA2A3      ;
 F779 EC04                           LDD     $04,X           ;
 F77B DDA4                           STD     TXTBUFA4A5      ;
 F77D EC06                           LDD     $06,X           ;
 F77F DDA6                           STD     TXTBUFA6A7      ;
 F781 8601                           LDAA    #$01            ;
 F783 97A8                           STAA    TXTBUFA8A9      ;
 F785 C604                           LDAB    #$04            ;
 F787 3A                             ABX                     ; increase 4 
words
 F788 DFCA                           STX     TEMP16_01       ;
 F78A BDF393                         JSR     DRWLN           ;
 F78D 7A00D3                         DEC     >GRAPHMOD       ;
 F790 26DD                           BNE     TP01            ;
 F792 7C00D3                         INC     >GRAPHMOD       ;
 F795 7EF268          _SENDRESP5_    JMP     SENDRESP        ;
                      ;--------------------------------------;
                      ;                         X0      Y0  ->  X1      Y1   ; 
Line from X1Y1 to X2Y2
                      ;                       A0  A1  A2  A3  A4  A5  A6  A7
 F798 00B40000        DATATAB        FCB     $00,$B4,$00,$00 ; 0 (180,0)
 F79C 00B400BF                       FCB     $00,$B4,$00,$BF ; 1 (180,191)
 F7A0 012C00BF                       FCB     $01,$2C,$00,$BF ; 2 (300,191)
 F7A4 012C0000                       FCB     $01,$2C,$00,$00 ; 3 (300,0)
 F7A8 00730000                       FCB     $00,$73,$00,$00 ; 4 (115,0)
 F7AC 00730032                       FCB     $00,$73,$00,$32 ; 5 (115,50)
 F7B0 016D0032                       FCB     $01,$6D,$00,$32 ; 6 (365,50)
 F7B4 016D008D                       FCB     $01,$6D,$00,$8D ; 7 (365,141)
 F7B8 0073008D                       FCB     $00,$73,$00,$8D ; 8 (115,141)
 F7BC 007300BF                       FCB     $00,$73,$00,$BF ; 9 (115,191)
 F7C0 016D00BF                       FCB     $01,$6D,$00,$BF ; 10 (365,191)
 F7C4 016D0000                       FCB     $01,$6D,$00,$00 ; 11 (365,0)
 F7C8 00730000                       FCB     $00,$73,$00,$00 ; 12 (115,0)
 F7CC 007300BF                       FCB     $00,$73,$00,$BF ; 13 (115,191)
 F7D0 00730000                       FCB     $00,$73,$00,$00 ; 14 (115,0)
 F7D4 00000000                       FCB     $00,$00,$00,$00 ; 15 (0,0)
 F7D8 01DF0000                       FCB     $01,$DF,$00,$00 ; 16 (479,0)
 F7DC 01DF00C7                       FCB     $01,$DF,$00,$C7 ; 17 (479,199)
 F7E0 000000C7                       FCB     $00,$00,$00,$C7 ; 18 (0,199)
 F7E4 00000000                       FCB     $00,$00,$00,$00 ; 19 (0,0)

                            ORG     $fd00
                      ;-----------------------0123456789012345678901234567890123
456789
 FD00 20202020202020  GREETING       FCC     '             EVA-1 Reproduction. 
       '
 FD07 20202020202045
 FD0E 56412D31205265
 FD15 70726F64756374
 FD1C 696F6E2E202020
 FD23 2020202020
 FD28 20202020202020                 FCC     '                OFFNER 2025      
       '
 FD2F 20202020202020
 FD36 20204F46464E45
 FD3D 52203230323520
 FD44 20202020202020
 FD4B 2020202020
 FD50 20202020202020                 FCC     '                    v1.0         
       '
 FD57 20202020202020
 FD5E 20202020202076
 FD65 312E3020202020
 FD6C 20202020202020
 FD73 2020202020
 FD78 20205665726269                 FCC     '  Verbinden mit HX-20 ueber 
gekreuztes  '
 FD7F 6E64656E206D69
 FD86 742048582D3230
 FD8D 20756562657220
 FD94 67656B7265757A
 FD9B 7465732020
 FDA0 202020204B6162                 FCC     '    Kabel und "SCREEN 1,0 
eingeben.     '
 FDA7 656C20756E6420
 FDAE 2253435245454E
 FDB5 20312C30206569
 FDBC 6E676562656E2E
 FDC3 2020202020
 FDC8 20204354524C2B                 FCC     '  CTRL+1: Text On/Off            
       '
 FDCF 313A2054657874
 FDD6 204F6E2F4F6666
 FDDD 20202020202020
 FDE4 20202020202020
 FDEB 2020202020
 FDF0 20204354524C2B                 FCC     '  CTRL+2: Invert                 
       '
 FDF7 323A20496E7665
 FDFE 72742020202020
 FE05 20202020202020
 FE0C 20202020202020
 FE13 2020202020
 FE18 20204354524C2B                 FCC     '  CTRL+3: 32 Columns             
       '
 FE1F 333A2033322043
 FE26 6F6C756D6E7320
 FE2D 20202020202020
 FE34 20202020202020
 FE3B 2020202020
 FE40 20204354524C2B                 FCC     '  CTRL+4: 40 Columns             
       '
 FE47 343A2034302043
 FE4E 6F6C756D6E7320
 FE55 20202020202020
 FE5C 20202020202020
 FE63 2020202020
 FE68 20204354524C2B                 FCC     '  CTRL+5: Cursor Blink           
       '
 FE6F 353A2043757273
 FE76 6F7220426C696E
 FE7D 6B202020202020
 FE84 20202020202020
 FE8B 2020202020
 FE90 20204354524C2B                 FCC     '  CTRL+6: Clear Graphics Screen  
       '
 FE97 363A20436C6561
 FE9E 72204772617068
 FEA5 69637320536372
 FEAC 65656E20202020
 FEB3 2020202020
 FEB8 20204354524C2B                 FCC     '  CTRL+6: Clear Graphics Screen  
       '
 FEBF 363A20436C6561
 FEC6 72204772617068
 FECD 69637320536372
 FED4 65656E20202020
 FEDB 2020202020
 FEE0 20204354524C2B                 FCC     '  CTRL+8: 80 Columns             
       '
 FEE7 383A2038302043
 FEEE 6F6C756D6E7320
 FEF5 20202020202020
 FEFC 20202020202020
 FF03 2020202020
 FF08 20204354524C2B                 FCC     '  CTRL+9: alternate Characterset 
       '
 FF0F 393A20616C7465
 FF16 726E6174652043
 FF1D 68617261637465
 FF24 72736574202020
 FF2B 2020202020
 FF30 20204354524C2B                 FCC     '  CTRL+0: Testpic. (use w. 
SCREEN 1,1)  '
 FF37 303A2054657374
 FF3E 7069632E202875
 FF45 736520772E2053
 FF4C 435245454E2031
 FF53 2C31292020
 FF58 0000                           FCB      $00,$00

 FF5A 3B              hdlr_NMI       RTI                              ;C7EF: 
3B

                              ORG     $ffF0

 FFF0 FF5A            svec_IRQ_SCI FDB     hdlr_NMI                 ;FFF0: C7 
EF
 FFF2 FF5A            svec_IRQ_T0F FDB     hdlr_NMI                 ;FFF2: C7 
EF
 FFF4 FF5A            svec_IRQ_OCF FDB     hdlr_NMI                 ;FFF4: C7 
EF
 FFF6 FF5A            svec_IRQ_ICF FDB     hdlr_NMI                 ;FFF6: C7 
EF
 FFF8 FF5A            svec_IRQ_EXT FDB     hdlr_NMI                 ;FFF8: C7 
EF
 FFFA FF5A            svec_SWI FDB     hdlr_NMI                 ;FFFA: C7 EF
 FFFC FF5A            svec_NMI FDB     hdlr_NMI                 ;FFFC: C7 EF
 FFFE F000            svec_RST FDB     hdlr_RST                 ;FFFE: C0 00

                              END

6 warning(s) in pass 2.

SYMBOL TABLE
 CALCRAMPOS 02 F2B2 CHAR_PER_LINE 00 00D2    CHKSUM 00 00C7    CHRTMP 00 00C5
 CLEARGRAM 02 F4A2 CLEARSCREEN 02 F561 CLEARTRAM 02 F141  CLRGRAPH 02 F4AF
   CLRLINE 02 F505   CLRSCRN 02 F5E1      CNTH 00 0009    CONF32 02 F670
    CONF40 02 F66E    CONF72 02 F4D5    CONF80 02 F4D3    CONV01 02 F349
    CONV02 02 F34D    CONV03 02 F36B    CONV04 02 F370    CONV05 02 F376
 CONVXPXLCHAR 02 F301   CRSRLFT 02 F515  CTRLCHAR 02 F234   CTRLTAB 02 F6A3
 CURSORCOLUMN 00 009A CURSORROW 00 009B   DATATAB 02 F798 DELETECHAR 02 F527
   DELLINE 02 F4FD DELSCREEN 02 F5DD  DISABLED 02 F12B  DRAWLINE 02 F388
     DRWLN 02 F393     ENTER 02 F566    EPSEND 02 F75D  EPSPFUNC 02 F724
  EXECFUNC 02 F24C  EXECSRCH 02 F240  GCRSRPOS 02 F196    GETHDR 02 F096
  GETPOINT 02 F1BC   GETTEXT 02 F06C   GRAMEND 00 C000 GRAMSETUP 02 F49D
 GRAPHICRAM 00 8000 GRAPHIC_CLR 02 F4B4  GRAPHMOD 00 00D3  GREETING 02 FD00
  HDLR_NMI 02 FF5A  HDLR_RST 02 F000 HDRBUFSTRT 00 0080   HDRCSSZ 00 0085
  HDRDAT01 02 F69F  HDRDAT02 02 F6A1 HDRFINISHED 02 F0BA   HDRFUNC 00 0083
    HDRSRC 00 0082   HDRSZFN 00 0084      HOME 02 F558   INCCRSR 02 F26D
 INVERTTEXT 02 F22E   LDCHKSM 02 F18F     LIN01 02 F39C     LIN02 02 F3A2
     LIN03 02 F3AB     LIN04 02 F3B1     LIN05 02 F3CF     LIN06 02 F3DC
     LIN07 02 F3F1     LIN08 02 F3F7     LIN09 02 F400     LIN0A 02 F413
     LIN0B 02 F41D     LIN0C 02 F41E     LIN0D 02 F426     LIN0E 02 F432
     LIN0F 02 F436     LIN10 02 F43E     LIN11 02 F44E     LIN12 02 F44F
     LIN13 02 F451     LIN14 02 F452     LIN15 02 F462     LIN16 02 F463
     LIN17 02 F466     LIN18 02 F476     LIN19 02 F47C  LINEFEED 02 F619
   LOCAL01 02 F22A   LOCAL02 02 F5EA   LOCAL05 02 F5D8   LOCAL06 02 F4AE
   LOCAL09 02 F1FD   LOCAL0A 02 F1EF   LOCAL0C 02 F4E4   LOCAL0D 02 F2BA
    LOOP01 02 F02F    LOOP02 02 F03A    LOOP03 02 F07B    LOOP04 02 F09A
    LOOP06 02 F110    LOOP07 02 F4A6     M00CE 00 00CE     M00D0 00 00D0
     M00D1 00 00D1     M00D9 00 00D9     M00DA 00 00DA   M6845_0 00 4000
   M6845_1 00 4001 MC6845_3240Z 02 F67F MC6845_7280Z 02 F65E MC6845_GRAPH 02 
F68F
 MOVCRSR_DWN 02 F626 MOVCRSR_LFT 02 F604 MOVCRSR_RGT 02 F5F3 MOVCRSR_UP 02 
F609
     P1DDR 00 0000      P1DR 00 0002     P2DDR 00 0001      P2DR 00 0003
    PUTPXL 02 F356     PXL01 02 F364     PXL02 02 F361    RAMEND 00 00FF
 RAMTXTSTART 00 00CC       RCR 00 0014       RDR 00 0012  READCHAR 02 F14A
  READLINE 02 F1D7 REGULACHAR 02 F256      RMCR 00 0010 RSTTXTSCRN 02 F12E
   RXTXCNT 00 00C1   SCRLDWN 02 F5A2    SCRLUP 02 F570  SCRNSIZE 02 F185
 SCRNSZ8025 02 F659     SENDB 02 F0B1   SENDPAK 02 F10C SENDPKT_00 02 F655
  SENDRESP 02 F268   SENDTX2 02 F19F   SENDTXT 02 F1AB  SEND_ACK 02 F0AF
  SEND_EOT 02 F11E SEND_NACK 02 F092 SET6845ADD 02 F288     SETB7 00 00C4
   SETCRSR 02 F2F5 SETDISPMOD 02 F2CB SETLINETERM 02 F49B  SETPOINT 02 F352
 SETTXTMOD 02 F2E9 SET_32CHAR 02 F63F SET_40CHAR 02 F63B SET_72CHAR 02 F4BD
 SET_80CHAR 02 F4B9 SET_CRSR_BLINK 02 F5CC SET_CRSR_OFF 02 F5D6 SET_CRSR_ON 02 
F5D2
  SHDRCSSZ 02 F191   SNDARR1 02 F0EB   SNDARR2 02 F0EC    SNDHDR 02 F0D6
 SNDNONACK 02 F0AA  SPCLCHAR 02 F71C SRLISTFLG 02 F2FE SVEC_IRQ_EXT 02 FFF8
 SVEC_IRQ_ICF 02 FFF6 SVEC_IRQ_OCF 02 FFF4 SVEC_IRQ_SCI 02 FFF0 SVEC_IRQ_T0F 
02 FFF2
  SVEC_NMI 02 FFFC  SVEC_RST 02 FFFE  SVEC_SWI 02 FFFA SWITCHCHARSET 02 F703
    TABHOR 02 F53D       TDR 00 0013 TEMP16_01 00 00CA  TEMPACAD 00 00AC
  TEMPAEAF 00 00AE    TEMPAF 00 00AF  TEMPB0B1 00 00B0  TEMPB2B3 00 00B2
  TEMPB4B5 00 00B4  TEMPB6B7 00 00B6  TEMPB8B9 00 00B8  TEMPBABB 00 00BA
  TEMPBCBD 00 00BC  TEMPBEBF 00 00BE    TEMPBF 00 00BF  TEMPC2C3 00 00C2
  TEMPD8D9 00 00D8 TESTPICTURE 02 F75E TEXTON_OFF 02 F226   TEXTRAM 00 1000
 TGLINTENS 02 F70C TGLINVERS 02 F714 TMPCRSRRW 00 00C8   TMPRDCH 00 00D4
 TOGGLEINSERTMD 02 F5B3      TP01 02 F76F   TRAMEND 00 1800     TRCSR 00 0011
 TXTBUFA0A1 00 00A0  TXTBUFA1 00 00A1 TXTBUFA2A3 00 00A2  TXTBUFA3 00 00A3
 TXTBUFA4A5 00 00A4 TXTBUFA6A7 00 00A6 TXTBUFA8A9 00 00A8 W6845REG1 02 F4E2
 W6845REG2 02 F4DE WAITHNDSHK 02 F03C   WAITRXC 02 F064 WRITECHAR 02 F252
 WRITE_CRSR_REG 02 F632     ZC1CA 02 F1CA     ZC1DF 02 F1DF     ZC1EB 02 F1EB
     ZC215 02 F215     ZC285 02 F285     ZC287 02 F287     ZC38C 02 F38C
     ZC490 02 F490     ZC50B 02 F50B     ZC50E 02 F50E     ZC524 02 F524
     ZC532 02 F532     ZC53F 02 F53F     ZC552 02 F552     ZC556 02 F556
     ZC56C 02 F56C     ZC5B5 02 F5B5     ZC5BC 02 F5BC     ZC614 02 F614
     ZC615 02 F615     ZC62F 02 F62F     ZC707 02 F707 _6845CRSRH 00 009C
 _6845CRSRL 00 009D _6845CRSRREG 00 00C6 _6845STRTADRH 00 0098 _6845STRTADRL 
00 0099
    _RTS1_ 02 F63A    _RTS2_ 02 F514 _SENDRESP1_ 02 F4B6 _SENDRESP2_ 02 F569
 _SENDRESP3_ 02 F5DA _SENDRESP4_ 02 F709 _SENDRESP5_ 02 F795 _SENDRESP6_ 02 
F56E
 _SENDRESP7_ 02 F5DF _SENDRESP8_ 02 F63D _SENDRESP9_ 02 F653 _SRLISTFLG1_ 02 
F354
 _WAITHNDSHK1_ 02 F4B1
257 SYMBOLS

0 error(s), 6 warning(s)
